import React, { useState, useEffect } from 'react';
import { Box, IconButton, Tooltip, Typography } from '@mui/material';
import MenuIcon from '@mui/icons-material/Menu';
import SchoolIcon from '@mui/icons-material/School';
import FunctionsIcon from '@mui/icons-material/Functions';
import CampaignIcon from '@mui/icons-material/Campaign';
import RestaurantIcon from '@mui/icons-material/Restaurant';
import GitHubIcon from '@mui/icons-material/GitHub';
import SettingsIcon from '@mui/icons-material/Settings';
import { useNavigate } from 'react-router-dom';

const menuItems = [
  { label: 'Rapid Training', path: '/skills', icon: <SchoolIcon />, external: false },
  { label: 'Algorithms', path: '/algorithms', icon: <FunctionsIcon />, external: false },
  { label: 'Marketing AI', path: '/marketing-ai', icon: <CampaignIcon />, external: false },
  { label: 'Food Saver', path: '/food-saver', icon: <RestaurantIcon />, external: false },
  { label: 'Github', path: 'https://github.com/nathannavmoondi', icon: <GitHubIcon />, external: true }
];

const SIDEBAR_MIN_WIDTH = 60;
const SIDEBAR_MAX_WIDTH = 220;
const WIDTH_BREAKPOINT = 1100;

export const Sidebar = () => {
  const navigate = useNavigate();
  const [isCollapsed, setIsCollapsed] = useState(window.innerWidth < WIDTH_BREAKPOINT);
  const [shouldShowHamburger, setShouldShowHamburger] = useState(window.innerWidth < WIDTH_BREAKPOINT);

  useEffect(() => {
    const handleResize = () => {
      const shouldCollapse = window.innerWidth < WIDTH_BREAKPOINT;
      setShouldShowHamburger(shouldCollapse);
      setIsCollapsed(shouldCollapse);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return (
    <Box
      sx={{
        width: isCollapsed ? SIDEBAR_MIN_WIDTH : SIDEBAR_MAX_WIDTH,
        minWidth: SIDEBAR_MIN_WIDTH,
        maxWidth: SIDEBAR_MAX_WIDTH,
        height: 'calc(100vh - 48px)',
        bgcolor: '#005487',
        color: 'white',
        display: 'flex',
        flexDirection: 'column',
        transition: 'all 0.2s',
        position: 'fixed',
        top: 48,
        left: 0,
        zIndex: 1200,
        borderRight: '3px solid rgba(255, 255, 255, 0.05)',
        boxShadow: `
          inset -2px 0 3px rgba(255, 255, 255, 0.15),
          inset -3px 0 4px rgba(0, 0, 0, 0.3),
          2px 0 5px rgba(0, 0, 0, 0.2)
        `,
        '&::after': {
          content: '""',
          position: 'absolute',
          top: 0,
          right: -1,
          width: '3px',
          height: '100%',
          background: 'linear-gradient(90deg, rgba(0,0,0,0.4) 0%, rgba(255,255,255,0.15) 100%)',
          pointerEvents: 'none',
          boxShadow: '1px 0 2px rgba(0,0,0,0.3)'
        }
      }}
    >
      {shouldShowHamburger && (
        <Box sx={{ display: 'flex', alignItems: 'center', px: 1, py: 1 }}>
          <IconButton 
            size="small" 
            sx={{ color: '#e3f2fd' }}
            onClick={() => setIsCollapsed(!isCollapsed)}
          >
            <MenuIcon />
          </IconButton>
        </Box>
      )}

      <Box sx={{ 
        flex: 1, 
        display: 'flex', 
        flexDirection: 'column', 
        gap: 0.5, 
        py: shouldShowHamburger ? 1 : 2,
        mt: shouldShowHamburger ? 0 : 1
      }}>
        {menuItems.map((item) => (
          <Tooltip title={isCollapsed ? item.label : ''} placement="right" key={item.label}>
            <Box
              sx={{
                display: 'flex',
                alignItems: 'center',
                px: 2,
                py: 1.2,
                cursor: 'pointer',
                gap: 2,
                '&:hover': {
                  bgcolor: '#1976d2',
                },
                transition: 'background 0.2s',
                borderRadius: '4px',
                mx: 0.5,
              }}
              onClick={() => {
                if (item.external) {
                  window.open(item.path, '_blank');
                } else {
                  navigate(item.path);
                }
              }}
            >
              {item.icon}
              {!isCollapsed && (
                <Typography variant="body1" sx={{ color: '#e3f2fd', fontWeight: 500 }}>
                  {item.label}
                </Typography>
              )}
            </Box>
          </Tooltip>
        ))}
      </Box>

      {/* Settings at bottom */}
      <Box sx={{ 
        borderTop: '1px solid rgba(255, 255, 255, 0.12)',
        py: 1,
        mt: 'auto'
      }}>
        <Tooltip title={isCollapsed ? "Settings" : ""} placement="right">
          <Box
            sx={{
              display: 'flex',
              alignItems: 'center',
              px: 2,
              py: 1.2,
              cursor: 'pointer',
              gap: 2,
              '&:hover': {
                bgcolor: '#1976d2',
              },
              transition: 'background 0.2s',
              borderRadius: '4px',
              mx: 0.5,
            }}
          >
            <SettingsIcon sx={{ color: '#e3f2fd' }} />
            {!isCollapsed && (
              <Typography variant="body1" sx={{ color: '#e3f2fd', fontWeight: 500 }}>
                Settings
              </Typography>
            )}
          </Box>
        </Tooltip>
      </Box>
    </Box>
  );
};
